# coding: utf-8

"""
    Weheat Backend

    This is the backend for the Weheat project

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EnergyViewDto(BaseModel):
    """
    EnergyViewDto
    """ # noqa: E501
    interval: Optional[StrictStr] = Field(default=None, description="Interval of this EnergyViewDto (Correct intervals include: \"Hour\", \"Day\", \"Week\", \"Month\", \"Year\")")
    time_bucket: Optional[datetime] = Field(default=None, alias="timeBucket")
    total_ein_heating: Union[StrictFloat, StrictInt] = Field(description="Total energy from electricity going into the heat pump for heating for this interval (in kwh)", alias="totalEInHeating")
    total_ein_dhw: Union[StrictFloat, StrictInt] = Field(description="Total energy from electricity going into the heat pump for doing DHW for this interval (in kwh)", alias="totalEInDhw")
    total_ein_heating_defrost: Union[StrictFloat, StrictInt] = Field(description="Total energy from electricity going into the heat pump for defrosting whilst heating for this interval (in kwh)", alias="totalEInHeatingDefrost")
    total_ein_dhw_defrost: Union[StrictFloat, StrictInt] = Field(description="Total energy from electricity going into the heat pump for defrosting whilst doing DHW for this interval (in kwh)", alias="totalEInDhwDefrost")
    total_ein_cooling: Union[StrictFloat, StrictInt] = Field(description="Total energy from electricity going into the heat pump for cooling for this interval (in kwh)", alias="totalEInCooling")
    total_e_out_heating: Union[StrictFloat, StrictInt] = Field(description="Total energy from electricity going out of the heat pump for heating for this interval (in kwh)", alias="totalEOutHeating")
    total_e_out_dhw: Union[StrictFloat, StrictInt] = Field(description="Total energy from electricity going out of the heat pump for doing DHW for this interval (in kwh)", alias="totalEOutDhw")
    total_e_out_heating_defrost: Union[StrictFloat, StrictInt] = Field(description="Total energy from electricity going out of the heat pump for defrosting whilst heating for this interval (in kwh)", alias="totalEOutHeatingDefrost")
    total_e_out_dhw_defrost: Union[StrictFloat, StrictInt] = Field(description="Total energy from electricity going out of the heat pump for defrosting whilst doing DHW for this interval (in kwh)", alias="totalEOutDhwDefrost")
    total_e_out_cooling: Union[StrictFloat, StrictInt] = Field(description="Total energy from electricity going out of the heat pump for cooling for this interval (in kwh)", alias="totalEOutCooling")
    average_power_ein_heating: Union[StrictFloat, StrictInt] = Field(description="Average power from electricity going into the heat pump for heating for this interval (in kW)", alias="averagePowerEInHeating")
    average_power_ein_dhw: Union[StrictFloat, StrictInt] = Field(description="Average power from electricity going into the heat pump for doing DHW for this interval (in kW)", alias="averagePowerEInDhw")
    average_power_ein_heating_defrost: Union[StrictFloat, StrictInt] = Field(description="Average power from electricity going into the heat pump for defrosting whilst heating for this interval (in kW)", alias="averagePowerEInHeatingDefrost")
    average_power_ein_dhw_defrost: Union[StrictFloat, StrictInt] = Field(description="Average power from electricity going into the heat pump for defrosting whilst doing DHW for this interval (in kW)", alias="averagePowerEInDhwDefrost")
    average_power_ein_cooling: Union[StrictFloat, StrictInt] = Field(description="Average power from electricity going into the heat pump for cooling for this interval (in kW)", alias="averagePowerEInCooling")
    average_power_e_out_heating: Union[StrictFloat, StrictInt] = Field(description="Average power from electricity going out of the heat pump for heating for this interval (in kW)", alias="averagePowerEOutHeating")
    average_power_e_out_dhw: Union[StrictFloat, StrictInt] = Field(description="Average power from electricity going out of the heat pump for doing DHW for this interval (in kW)", alias="averagePowerEOutDhw")
    average_power_e_out_heating_defrost: Union[StrictFloat, StrictInt] = Field(description="Average power from electricity going out of the heat pump for defrosting whilst heating for this interval (in kW)", alias="averagePowerEOutHeatingDefrost")
    average_power_e_out_dhw_defrost: Union[StrictFloat, StrictInt] = Field(description="Average power from electricity going out of the heat pump for defrosting whilst doing DHW for this interval (in kW)", alias="averagePowerEOutDhwDefrost")
    average_power_e_out_cooling: Union[StrictFloat, StrictInt] = Field(description="Average power from electricity going out of the heat pump for cooling for this interval (in kW)", alias="averagePowerEOutCooling")
    __properties: ClassVar[List[str]] = ["interval", "timeBucket", "totalEInHeating", "totalEInDhw", "totalEInHeatingDefrost", "totalEInDhwDefrost", "totalEInCooling", "totalEOutHeating", "totalEOutDhw", "totalEOutHeatingDefrost", "totalEOutDhwDefrost", "totalEOutCooling", "averagePowerEInHeating", "averagePowerEInDhw", "averagePowerEInHeatingDefrost", "averagePowerEInDhwDefrost", "averagePowerEInCooling", "averagePowerEOutHeating", "averagePowerEOutDhw", "averagePowerEOutHeatingDefrost", "averagePowerEOutDhwDefrost", "averagePowerEOutCooling"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EnergyViewDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if interval (nullable) is None
        # and model_fields_set contains the field
        if self.interval is None and "interval" in self.model_fields_set:
            _dict['interval'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EnergyViewDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "interval": obj.get("interval"),
            "timeBucket": obj.get("timeBucket"),
            "totalEInHeating": obj.get("totalEInHeating"),
            "totalEInDhw": obj.get("totalEInDhw"),
            "totalEInHeatingDefrost": obj.get("totalEInHeatingDefrost"),
            "totalEInDhwDefrost": obj.get("totalEInDhwDefrost"),
            "totalEInCooling": obj.get("totalEInCooling"),
            "totalEOutHeating": obj.get("totalEOutHeating"),
            "totalEOutDhw": obj.get("totalEOutDhw"),
            "totalEOutHeatingDefrost": obj.get("totalEOutHeatingDefrost"),
            "totalEOutDhwDefrost": obj.get("totalEOutDhwDefrost"),
            "totalEOutCooling": obj.get("totalEOutCooling"),
            "averagePowerEInHeating": obj.get("averagePowerEInHeating"),
            "averagePowerEInDhw": obj.get("averagePowerEInDhw"),
            "averagePowerEInHeatingDefrost": obj.get("averagePowerEInHeatingDefrost"),
            "averagePowerEInDhwDefrost": obj.get("averagePowerEInDhwDefrost"),
            "averagePowerEInCooling": obj.get("averagePowerEInCooling"),
            "averagePowerEOutHeating": obj.get("averagePowerEOutHeating"),
            "averagePowerEOutDhw": obj.get("averagePowerEOutDhw"),
            "averagePowerEOutHeatingDefrost": obj.get("averagePowerEOutHeatingDefrost"),
            "averagePowerEOutDhwDefrost": obj.get("averagePowerEOutDhwDefrost"),
            "averagePowerEOutCooling": obj.get("averagePowerEOutCooling")
        })
        return _obj


